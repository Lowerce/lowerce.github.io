<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lowerce&#39;s Wiki Blog – algorithm</title>
    <link>https://lowerce.github.io/tags/algorithm/</link>
    <description>Recent content in algorithm on Lowerce&#39;s Wiki Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Aug 2021 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://lowerce.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: leetcode算法总结(UPDATE-1)</title>
      <link>https://lowerce.github.io/docs/algorithm/leetcode-record-2/</link>
      <pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lowerce.github.io/docs/algorithm/leetcode-record-2/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;即使不靠算法吃饭，leetcode依然能让我在编程语言的使用上更上一层楼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文内容依据我在使用c++完成各类leetcode问题时得到的有效信息和经验写成。&lt;/p&gt;
&lt;p&gt;P.S.可能更强调在c++的使用上而非各类逆天的算法解决方案上。&lt;/p&gt;
&lt;h2 id=&#34;1-一些c标准库函数&#34;&gt;1. 一些C++标准库函数&lt;/h2&gt;
&lt;h3 id=&#34;reverse&#34;&gt;reverse&lt;/h3&gt;
&lt;p&gt;这个好像可以用来反转很多C++支持的数据结构，一般是两个输入参量，用法大概是这样。reverse(开始位置，开始位置+需要翻转的数量)，从这个角度看，它的输入参量是&lt;strong&gt;左闭右开&lt;/strong&gt;的区间，例如reverse(string.begin(),string.end())&amp;hellip;&lt;/p&gt;
&lt;p&gt;反正第一次用起来有点晕，极有可能c++很多的标准函数采用类似的输入形式，需要注意。&lt;/p&gt;
&lt;h3 id=&#34;resize&#34;&gt;resize&lt;/h3&gt;
&lt;p&gt;反正对于字符串而言挺好使，直接resize(更新后的尺寸)，可以直接把字符串扩充到指定长度，多出来的部分应该是空的吧。&lt;/p&gt;
&lt;h3 id=&#34;sort&#34;&gt;sort&lt;/h3&gt;
&lt;p&gt;sort(begin(),end())这样用，反正可以直接按从小到大光速排序，这里的开始和结束参照reverse，输入是完全一样的方法。说明前面的猜想是正确的😄。&lt;/p&gt;
&lt;p&gt;好像还可以用自定义函数作为第三个输入参量来作为排序依据，这个等以后做题遇到的时候再写吧，没用过的东西一概不写😋。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以后随时更新&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: leetcode算法总结</title>
      <link>https://lowerce.github.io/docs/algorithm/leetcode-record/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lowerce.github.io/docs/algorithm/leetcode-record/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;即使不靠算法吃饭，leetcode依然能让我在编程语言的使用上更上一层楼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文内容依据我在使用c++完成各类leetcode问题时得到的有效信息和经验写成。&lt;/p&gt;
&lt;p&gt;P.S.可能更强调在c++的使用上而非各类逆天的算法解决方案上。&lt;/p&gt;
&lt;h2 id=&#34;1-map&#34;&gt;1. map&lt;/h2&gt;
&lt;p&gt;总的来说map是一个非常好用的东西，很多可以用set的问题我依然使用map来解决，感觉很舒服。&lt;/p&gt;
&lt;h3 id=&#34;创建&#34;&gt;创建&lt;/h3&gt;
&lt;p&gt;创建的时候需要指定好类型 map or unordered_map &amp;lt; type , type &amp;gt; variable_name，创建出来是空的。拿unordered_map&amp;lt;string,int&amp;gt; maps来举例。&lt;/p&gt;
&lt;h3 id=&#34;插入删除&#34;&gt;插入删除&lt;/h3&gt;
&lt;p&gt;对于计数型应用(反正做题比较多)，即后一个type是int的情况，用起来很简单，直接maps[&amp;ldquo;hello&amp;rdquo;]++，这样就在创建了对应key值并+1。这里使用上&lt;strong&gt;值得注意&lt;/strong&gt;，当key对应的value值减到0时，并不意味着这个key就消失了，需要maps.erase(&amp;ldquo;hello&amp;rdquo;)才能真正抹掉对应的key值。&lt;/p&gt;
&lt;p&gt;其它的应用就需要使用maps.insert(pair&amp;lt;string,string&amp;gt;(&amp;ldquo;hello&amp;rdquo;,&amp;ldquo;world&amp;rdquo;))来插入了。&lt;/p&gt;
&lt;h3 id=&#34;查找&#34;&gt;查找&lt;/h3&gt;
&lt;p&gt;作为一个哈希表，查找是其得到使用的根本原因。&lt;/p&gt;
&lt;p&gt;看一个key是不是在表里， if(maps.find(&amp;ldquo;hello&amp;rdquo;)!=maps.end()) ，如果返回true，则说明在表里。这里的返回值是一个迭代器，迭代器这么用，maps.find(&amp;ldquo;hello&amp;rdquo;)-&amp;gt;first ，这就是key的值（也就是&amp;quot;hello&amp;quot;），maps.find(&amp;ldquo;hello&amp;rdquo;)-&amp;gt;second ，这就是&amp;quot;hello&amp;quot;对应的value值。&lt;/p&gt;
&lt;p&gt;想遍历map，也得靠迭代器，先造个迭代器，unordered_map&amp;lt;string,int&amp;gt;::iterator itr，然后for循环的用法就跟一般的遍历差不多了。for(itr=maps.begin();itr!=maps.end();itr++)这样就能遍历啦。&lt;/p&gt;
&lt;h2 id=&#34;2-string&#34;&gt;2. string&lt;/h2&gt;
&lt;p&gt;string的各种操作用法千奇百怪，很多感觉几乎等效。&lt;/p&gt;
&lt;h3 id=&#34;assign&#34;&gt;assign&lt;/h3&gt;
&lt;p&gt;大概用法是 s1.assign(s,index,num) ，这样可以把s字符串从index索引值开始往后的num个字符赋给s1字符串。&lt;/p&gt;
&lt;p&gt;基本跟substr是一样的。&lt;/p&gt;
&lt;h3 id=&#34;substr&#34;&gt;substr&lt;/h3&gt;
&lt;p&gt;s1=s.substr(index,num) ，这个操作跟使用assign是等效的。&lt;/p&gt;
&lt;h2 id=&#34;3-for&#34;&gt;3. for&lt;/h2&gt;
&lt;p&gt;for循环一些自动遍历的trick之前没用过。&lt;/p&gt;
&lt;p&gt;比如for(auto i:nums)或者for(auto &amp;amp;i:maps)，后者取值用t.first和t.second即可。也可以for(auto &amp;amp;[key,vaule]:maps)就能直接取到key和value啦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以后随时更新&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
