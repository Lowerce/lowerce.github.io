<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lowerce&#39;s Blog - A technology &amp; emotion Blog</title>
    <link>https://lowerce.github.io/</link>
    <description>Recent content on Lowerce&#39;s Blog - A technology &amp; emotion Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 07 Nov 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://lowerce.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About Me</title>
      <link>https://lowerce.github.io/about/</link>
      <pubDate>Thu, 31 Dec 2020 10:43:19 +0800</pubDate>
      
      <guid>https://lowerce.github.io/about/</guid>
      
        <description>&lt;p&gt;I&amp;rsquo;m a &lt;strong&gt;PhD student&lt;/strong&gt; in the mainland of China.&lt;/p&gt;
&lt;p&gt;This blog is established for recording the solution of the problem I met at work and the love between my girl and me.&lt;/p&gt;
&lt;p&gt;The main techniques I focus on are showed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geant4.web.cern.ch/&#34;&gt;Geant4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://root.cern/&#34;&gt;ROOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tensorflow.google.cn/&#34;&gt;TensorFlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/zh-cn/dotnet/csharp/&#34;&gt;C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cplusplus.com/&#34;&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main fields I focus on are showed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Nuclear Science and Technology&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Embedded Programming&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Host Computer Programming&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>C&#43;&#43; Primer充电以及C&#43;&#43;特性了解</title>
      <link>https://lowerce.github.io/post/cpp/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lowerce.github.io/post/cpp/</guid>
      
        <description>&lt;p&gt;&lt;em&gt;这是Lowerce&amp;rsquo;s Blog的第九篇文章&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;C++基础知识？&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;c-primer&#34;&gt;C++ Primer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;单文件编译&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;g++ -o 输出文件名 待编译文件名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取、输出到文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;程序名 &amp;lt; 输入文件&lt;/p&gt;
&lt;p&gt;程序名 &amp;gt; 输出文件&lt;/p&gt;
&lt;h4 id=&#34;数据类型&#34;&gt;数据类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;选用的经验：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数值不为负选择无符号型(unsigned)&lt;/p&gt;
&lt;p&gt;整数运算选用&lt;code&gt;int&lt;/code&gt;，超过表示范围的话选用&lt;code&gt;long long&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;浮点数运算选用&lt;code&gt;double&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要混用有符号类型和无符号类型，带符号数会自动转换为无符号数，等于初始值对无符号类型所能表示的数值总数取模后的余数&lt;/li&gt;
&lt;li&gt;字符型字面值常量的类型可以通过前缀指定，整型、浮点型可以通过后缀指定&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;变量&#34;&gt;变量&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;初始化和赋值存在本质上的巨大区别&lt;/li&gt;
&lt;li&gt;使用列表初始化{}，在可能的数据丢失时会使编译器给出警告&lt;/li&gt;
&lt;li&gt;声明(declaration)和定义(definition)是不同的，声明使名字为程序所知，定义则为变量申请存储空间或赋初值&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;extern&lt;/code&gt;关键字来声明变量&lt;/li&gt;
&lt;li&gt;变量能且只能被定义一次，但可以被多次声明&lt;/li&gt;
&lt;li&gt;C++是静态语言——在编译阶段检查类型&lt;/li&gt;
&lt;li&gt;全局变量在块作用域内用&lt;code&gt;::&lt;/code&gt;前缀可以显式访问（屏蔽块作用域内的局部变量）&lt;/li&gt;
&lt;li&gt;局部变量最好不要同全局变量同名&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;复合类型&#34;&gt;复合类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;通过在变量名前加&lt;code&gt;&amp;amp;&lt;/code&gt;来定义引用类型，引用必须初始化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引用即别名&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;引用只能绑定在对象上&lt;/li&gt;
&lt;li&gt;指针存放对象的地址，使用&lt;strong&gt;取地址符&lt;/strong&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;获取地址&lt;/li&gt;
&lt;li&gt;利用指针访问对象，使用&lt;strong&gt;解引用符&lt;/strong&gt;&lt;code&gt;*&lt;/code&gt;访问对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;和&lt;code&gt;*&lt;/code&gt;出现在声明和表达式中的含义截然不同&lt;/li&gt;
&lt;li&gt;初始化空指针(=nullptr、=0、=NULL)&lt;/li&gt;
&lt;li&gt;赋值永远改变的是等号左侧的对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void*&lt;/code&gt;可以存放任意对象的地址&lt;/li&gt;
&lt;li&gt;类型修饰符(&lt;code&gt;*&lt;/code&gt;和&lt;code&gt;&amp;amp;&lt;/code&gt;)仅修饰其后的&lt;strong&gt;第一个&lt;/strong&gt;变量标识符&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;const限定符&#34;&gt;const限定符&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;弄清声明的含义最有效的方法是从右向左阅读&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;放在const之前说明指针是一个常量-不变的是指针本身的值而非指向的那个值&lt;/li&gt;
&lt;li&gt;指针本身是一个常量并不意味着不能通过指针修改其所指向对象的值&lt;/li&gt;
&lt;li&gt;非常量可以转换为常量 反之则不行&lt;/li&gt;
&lt;li&gt;常量表达式是指值不会改变并且在编译过程就能得到计算结果的表达式&lt;/li&gt;
&lt;li&gt;一个对象是不是常量表达式由它的数据类型和初始值共同决定&lt;/li&gt;
&lt;li&gt;顶层const 和 底层const&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;处理类型&#34;&gt;处理类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;类型别名：typedef 前者 后者 —— 后者是前者的同义词&lt;/li&gt;
&lt;li&gt;注意typedef中使用&lt;code&gt;*&lt;/code&gt;的情况（并不是简单的替换关系）&lt;/li&gt;
&lt;li&gt;别名声明：using 前者 = 后者 —— 前者是后者的同义词&lt;/li&gt;
&lt;li&gt;auto 根据初值自动推断数据类型（仅保留底层const）顶层const需要在auto前加以修饰&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;和&lt;code&gt;&amp;amp;&lt;/code&gt;只从属于某个声明符而非基本数据类型的一部分&lt;/li&gt;
&lt;li&gt;decltype 推断表达式类型而不使用其作为初值（保留变量的全部类型）&lt;/li&gt;
&lt;li&gt;如果decltype使用的表达式不是一个变量，则decltype返回表达式结果对应的类型&lt;/li&gt;
&lt;li&gt;如果表达式的内容是解引用操作，则decltype将得到引用类型&lt;/li&gt;
&lt;li&gt;对于decltype所用的表达式来说，在变量名上加括号与不加括号得到的类型会有不同&lt;/li&gt;
&lt;li&gt;decltype((变量))的结果永远是引用，decltype(变量)只有在变量本身是引用时才是引用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;自定义数据结构&#34;&gt;自定义数据结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;struct 类名 类体 &lt;code&gt;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;预处理器保证头文件多次包含仍能安全工作——头文件保护符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#define&lt;/code&gt;把一个名字设定为预处理变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#ifdef&lt;/code&gt;当且仅当变量已定义时为真&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#ifndef&lt;/code&gt;当且仅当变量未定义时为真&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#endif&lt;/code&gt;检查结果为真时执行后续操作直到出现此命令&lt;/li&gt;
&lt;li&gt;一般将预处理变量名全部大写以保证其唯一性&lt;/li&gt;
&lt;li&gt;头文件一旦改变，相关的源文件必须重新编译以获取更新过的声明&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;using声明&#34;&gt;using声明&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;using namespace::name;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;头文件中不应包含using声明&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;string&#34;&gt;string&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::string&lt;/code&gt; 可变长字符序列&lt;/li&gt;
&lt;li&gt;在执行读取操作时，string对象会自动忽略开头的空白（空格符、换行符、制表符等）并从第一个真正的字符开始读起，直到遇见下一处空白为止&lt;/li&gt;
&lt;li&gt;常用操作:&lt;code&gt;getline(a,b)&lt;/code&gt;——从a中读取一行（以换行符为界）赋给b &lt;code&gt;s.empty()&lt;/code&gt;——判断s是否为空 &lt;code&gt;s.size()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;size函数的返回值是一个无符号整型数（类型为string::size_type） 注意避免int和unsigned混用&lt;/li&gt;
&lt;li&gt;string的比较：1.字符相同时，较短string小于较长string；2.字符相异时，第一对相异字符的比较&lt;/li&gt;
&lt;li&gt;当string对象和字符/字符串字面值混在一条语句中时，必须确保每个+两侧的运算对象至少有一个是string&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字符串字面值与string是不同的类型&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用C++版本的C标准库头文件 &lt;code&gt;ctype.h&lt;/code&gt;=&amp;gt;&lt;code&gt;cctype&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cctype中包含一系列字符的判断和处理函数&lt;/li&gt;
&lt;li&gt;基于范围的for语句 &lt;code&gt;for (declaration : expression)&lt;/code&gt; 类似于python中的for语句&lt;/li&gt;
&lt;li&gt;string中的字符可以通过下标访问&lt;/li&gt;
&lt;li&gt;始终注意检查下标的合法性（是否在正确的范围内）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;vector&#34;&gt;vector&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::vector&lt;/code&gt; 对象的集合（所有对象的类型相同）；容器&lt;/li&gt;
&lt;li&gt;vector是模板而非类型&lt;/li&gt;
&lt;li&gt;vector&amp;lt;类型&amp;gt; 容器名;&lt;/li&gt;
&lt;li&gt;vector丰富的初始化方式：列表、拷贝、构造&amp;hellip;&lt;/li&gt;
&lt;li&gt;push_back(值) 将值作为vector的尾元素压到vector的尾端&lt;/li&gt;
&lt;li&gt;vector能高效地快速添加元素（没有必要为其指定容量）&lt;/li&gt;
&lt;li&gt;如果循环体内部包含有向vector添加元素的语句，则不能使用范围for循环&lt;/li&gt;
&lt;li&gt;empty和size函数与string的类似&lt;/li&gt;
&lt;li&gt;size函数的返回值也是属于vector的特殊类型size_type 但需要指出vector的元素类型&lt;/li&gt;
&lt;li&gt;vector的比较法则也与string类似&lt;/li&gt;
&lt;li&gt;vector不能使用下标添加元素，只能使用下标访问已存在的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;迭代器&#34;&gt;迭代器&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;有迭代器的类型同时拥有返回迭代器的成员&lt;/li&gt;
&lt;li&gt;begin()返回指向第一个元素的迭代器 end()返回指向尾元素下一位置**（尾后）**的迭代器&lt;/li&gt;
&lt;li&gt;一般来说，我们不清楚迭代器的准确类型（使用auto来定义变量）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*iter&lt;/code&gt;返回迭代器所指元素的引用 &lt;code&gt;iter-&amp;gt;mem&lt;/code&gt; &lt;code&gt;++iter&lt;/code&gt;/&lt;code&gt;--iter&lt;/code&gt;指示容器的下一个/上一个元素&lt;/li&gt;
&lt;li&gt;泛型编程：所有标准库容器的迭代器都定义了==和!=，所以在for循环中使用!=而非&amp;lt;，因为这种编程风格在标准库提供的所有容器中都有效&lt;/li&gt;
&lt;li&gt;const_iterator只能读元素，不能写元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;即为解引用和成员访问的结合，it-&amp;gt;mem等价于(*it).mem&lt;/li&gt;
&lt;li&gt;任何一种可能改变vector容量的操作，都会使该vector的迭代器失效&lt;/li&gt;
&lt;li&gt;凡是使用了迭代器的循环体，都不要向迭代器所属的容易添加元素&lt;/li&gt;
&lt;li&gt;两个迭代器相减的结果为difference_type（带符号整型数）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;数组&#34;&gt;数组&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;与vector类似的是存放类型相同的对象的容器；不同的是数组的大小确定不变，不能随意向其增加元素&lt;/li&gt;
&lt;li&gt;数组中元素的个数也是数组类型的一部分，所以需要为常量表达式&lt;/li&gt;
&lt;li&gt;数组的初始化：列表初始化，不允许拷贝&lt;/li&gt;
&lt;li&gt;字符数组可以使用字符串字面值初始化，但要注意字符串字面值结尾处自带一个空字符&lt;/li&gt;
&lt;li&gt;默认情况下，类型修饰符从右向左依次绑定；但对于数组而言，由（括号）内向外阅读更有意义&lt;/li&gt;
&lt;li&gt;在使用数组下标时，通常将其定义为size_t类型&lt;/li&gt;
&lt;li&gt;使用数组类型的对象其实是使用一个指向该数组首元素的指针&lt;/li&gt;
&lt;li&gt;当使用数组作为一个auto变量的初始值时，推断得到的类型是指针而非数组；但是decltype不会发生上述转换&lt;/li&gt;
&lt;li&gt;数组可以使用下标索引尾元素后那个并不存在的元素&lt;/li&gt;
&lt;li&gt;begin(数组名)/end(数组名)能安全地返回首元素指针/尾后元素指针&lt;/li&gt;
&lt;li&gt;两个指针相减的结果为ptrdiff_t&lt;/li&gt;
&lt;li&gt;如果两个指针分别指向不相关的对象，则不能比较&lt;/li&gt;
&lt;li&gt;内置的下标运算符所用的索引值不是无符号类型，这与vector和string是不同的&lt;/li&gt;
&lt;li&gt;使用标准库string比使用C风格字符串更安全高效&lt;/li&gt;
&lt;li&gt;尽量使用标准库类型而非数组&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多维数组&#34;&gt;多维数组&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;严格来说，C++中没有多维数组，通常所说的多维数组其实是数组的数组&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;{}&lt;/code&gt;括起来的一组值初始化多维数组，花括号嵌套与否完全等价（嵌套只是为了更清晰地阅读）&lt;/li&gt;
&lt;li&gt;可以仅初始化部分元素，其它元素执行默认初始化&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c特性&#34;&gt;C++特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;unique_ptr&amp;lt;类型&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		代表一种不共享的指针，不能复制只能移动(&lt;code&gt;std::move&lt;/code&gt;)，可以通过&lt;code&gt;make_unique&amp;lt;类型&amp;gt;(参数)&lt;/code&gt;来创建。归属于头文件&lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;，属于C++标准库。&lt;/p&gt;
&lt;p&gt;​		参考 &lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/cpp/how-to-create-and-use-unique-ptr-instances?view=msvc-160&#34;&gt;How to: Create and use unique_ptr instances&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;inline&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		一种关键字，表示内联。在程序编译过程中对内联部分的代码调用直接替换代码段。仅适用于简单函数，仅对编译器进行建议，必须与实际实现的函数体放在一起才有意义（仅作用于声明则无效）。&lt;/p&gt;
&lt;p&gt;​		参考 &lt;a href=&#34;https://www.runoob.com/w3cnote/cpp-inline-usage.html&#34;&gt;C++ 中的 inline 用法&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;const&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		一种关键字，表示常量。被修饰的对象或变量无法被修改。&lt;/p&gt;
&lt;p&gt;​		const对象必须初始化，仅在文件内有效。&lt;/p&gt;
&lt;p&gt;​		如果想在多个文件中共享const对象，必须在变量的定义之前添加extern关键字。&lt;/p&gt;
&lt;p&gt;​		允许一个常量引用绑定非常量对象，但无法通过常量引用改变非常量对象。类似的，允许一个常量指针绑定非常量对象。&lt;/p&gt;
&lt;p&gt;​        参考 &lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/cpp/const-cpp?view=msvc-160&#34;&gt;const (C++)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;constexpr&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​        用来修饰编译器常量。由编译器来验证变量的值是否是一个常量表达式。&lt;/p&gt;
&lt;p&gt;​        在C++ 11中，表示“常量”可以用constexpr，表示“只读”时才用const。&lt;/p&gt;
&lt;p&gt;​        constexpr在修饰指针时仅对指针有效，与指针所指的对象无关。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Docker原理及应用</title>
      <link>https://lowerce.github.io/post/docker/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lowerce.github.io/post/docker/</guid>
      
        <description>&lt;p&gt;&lt;em&gt;这是Lowerce&amp;rsquo;s Blog的第七篇文章&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;command&#34;&gt;Command&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt;  列出全部映像&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run -it 映像&lt;/code&gt;  运行并保持某一映像&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker ps -a&lt;/code&gt;  列出全部容器（包括未在运行的）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker container prune&lt;/code&gt;  删除全部已停止的容器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker rm 容器&lt;/code&gt;   删除指定容器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker port 容器&lt;/code&gt;  查看容器所映射的端口&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker start 容器&lt;/code&gt;  启动指定容器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker stop 容器&lt;/code&gt;  停止指定容器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker search 映像&lt;/code&gt;  搜索所需映像&lt;/p&gt;
&lt;h2 id=&#34;dockerfile&#34;&gt;Dockerfile&lt;/h2&gt;
&lt;h2 id=&#34;trick&#34;&gt;Trick&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run --rm 映像&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;映像不存在时自动pull映像运行并在映像运行结束后自动删除容器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run -d -P --name 指定一个名称 映像&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;终端界面可以自由关闭而不影响容器的持续运行，映射容器的端口到本机的随机端口，并为容器指定名称&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run -p 本机端口:映像端口 映像&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将映像的端口映射到本机的端口中来启动容器&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>前后端开发自学指南</title>
      <link>https://lowerce.github.io/post/site_construction/</link>
      <pubDate>Sat, 18 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lowerce.github.io/post/site_construction/</guid>
      
        <description>&lt;p&gt;&lt;em&gt;这是Lowerce&amp;rsquo;s Blog的第六篇文章&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;学点有的没的，以加深对于网络世界的理解。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;spring-boot&#34;&gt;Spring Boot&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在Intellij IDEA中新建项目，使用Spring Initializer创建即可。&lt;/p&gt;
&lt;p&gt;名称最好为网址的倒序排列。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;入门&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考&lt;a href=&#34;https://spring.io/&#34;&gt;spring.io&lt;/a&gt;中&lt;a href=&#34;https://spring.io/guides&#34;&gt;Guides&lt;/a&gt;栏下的&lt;a href=&#34;https://spring.io/guides/gs/serving-web-content/&#34;&gt;Serving Web Content with Spring MVC&lt;/a&gt;进行配置。&lt;/p&gt;
&lt;p&gt;主要注意&lt;code&gt;pom.xml&lt;/code&gt;中&lt;code&gt;dependency&lt;/code&gt;的添加，&lt;code&gt;controller&lt;/code&gt;的创建以及&lt;code&gt;templates&lt;/code&gt;中html的添加。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;bootstrap&#34;&gt;Bootstrap&lt;/h3&gt;
&lt;p&gt;参考&lt;a href=&#34;https://v3.bootcss.com/components/&#34;&gt;bootstrap v3&lt;/a&gt;中各组件的使用，以及&lt;a href=&#34;https://v3.bootcss.com/css/#grid&#34;&gt;bootstrap 栅格系统&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在https://v3.bootcss.com/getting-started/#download中直接下载用于生产环境的bootstrap。&lt;/p&gt;
&lt;p&gt;把这些文件放至&lt;code&gt;static&lt;/code&gt;目录下。&lt;/p&gt;
&lt;p&gt;按照https://v3.bootcss.com/getting-started/#download-cdn的方式在html中部署css和js文件，路径应为&lt;code&gt;css/&lt;/code&gt;或者&lt;code&gt;js/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;拷贝所需组件的代码至html文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;登录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参照https://docs.github.com/en/developers/apps/building-oauth-apps来使用Github登录。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Developer setting&lt;/code&gt;中创建OAuth应用。&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;登录&lt;/strong&gt;按钮处按照https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps的&lt;strong&gt;GET&lt;/strong&gt;部分来填写&lt;code&gt;href&lt;/code&gt;，其&lt;code&gt;Parameters&lt;/code&gt;使用&lt;code&gt;?&amp;amp;&lt;/code&gt;的组合传入。&lt;/p&gt;
&lt;p&gt;创建&lt;code&gt;controller&lt;/code&gt;来接收&lt;code&gt;callback&lt;/code&gt;的数据（包含code和state）。&lt;/p&gt;
&lt;p&gt;这里使用&lt;a href=&#34;https://square.github.io/okhttp/&#34;&gt;OkHttp&lt;/a&gt;来&lt;strong&gt;POST&lt;/strong&gt;。需要一个&lt;code&gt;DTO&lt;/code&gt;（需要&lt;code&gt;POST&lt;/code&gt;的参数以及相应的get\set方法）和一个&lt;code&gt;Provider&lt;/code&gt;（创建一个方法来调用&lt;code&gt;OkHttp&lt;/code&gt;）。Json依赖可以使用&lt;code&gt;Fastjson&lt;/code&gt;，可在https://mvnrepository.com/里查找所需库并按&lt;code&gt;Maven&lt;/code&gt;来添加&lt;code&gt;dependency&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;controller&lt;/code&gt;中调用&lt;code&gt;Provider&lt;/code&gt;和&lt;code&gt;DTO&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;再通过&lt;code&gt;access_token&lt;/code&gt;&lt;strong&gt;GET&lt;/strong&gt;接入API。同样可以构造&lt;code&gt;DTO&lt;/code&gt;（&lt;code&gt;DTO&lt;/code&gt;的内容选择需要&lt;code&gt;GET&lt;/code&gt;的参数内容）和&lt;code&gt;Provider&lt;/code&gt;（&lt;code&gt;Provider&lt;/code&gt;可以共用，因为是同一个过程的不同步骤，有些变量会重用）。使用&lt;code&gt;JSON.parseObject&lt;/code&gt;来将String按照DTO的形式来切分。&lt;/p&gt;
&lt;p&gt;基本流程：&lt;strong&gt;GET获取code -&amp;gt; POST获取的code来换取AccessToken -&amp;gt; 使用AccessToken来GET用户信息&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Session&amp;amp;Cookie&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;HttpServletRequest用来处理Http请求，获取session并将得到的用户信息写入session以保持登录态。&lt;/p&gt;
&lt;p&gt;session信息和前端页面的绑定通过index.html的修改实现，需要根据&lt;code&gt;dependency&lt;/code&gt;依赖的引擎所支持的语法来改写前端页面。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;redirect:/&amp;ldquo;可以重定向至首页。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;applicationproperties&#34;&gt;application.properties&lt;/h3&gt;
&lt;p&gt;server.port 指定端口&lt;/p&gt;
&lt;p&gt;可以任意指定关键字，使用时在@Value中替换即可。适用于当前环境与开发环境不一致的路径，便于快速修改。&lt;/p&gt;
&lt;h3 id=&#34;spring-&#34;&gt;Spring @&lt;/h3&gt;
&lt;p&gt;@Component&lt;/p&gt;
&lt;p&gt;@Autowired&lt;/p&gt;
&lt;p&gt;@Value(&amp;quot;${}&amp;quot;)&lt;/p&gt;
&lt;p&gt;@Controller&lt;/p&gt;
&lt;p&gt;@GetMapping()&lt;/p&gt;
&lt;h3 id=&#34;快捷键&#34;&gt;快捷键&lt;/h3&gt;
&lt;p&gt;ctrl alt v 快速创建变量&lt;/p&gt;
&lt;p&gt;alt insert 快速创建get\set等方法&lt;/p&gt;
&lt;p&gt;ctrl n 检索&lt;/p&gt;
&lt;p&gt;shift enter 快速换行&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Mounty的使用技巧</title>
      <link>https://lowerce.github.io/post/mounty-in-mac/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lowerce.github.io/post/mounty-in-mac/</guid>
      
        <description>&lt;p&gt;&lt;em&gt;这是Lowerce&amp;rsquo;s Blog的第五篇文章&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;对于Mac而言，读取文件格式为NTFS的U盘或者移动硬盘是令人痛苦的，虽然并非Mac不支持，但是因为种种原因苹果并不想让各位Mac用户简单方便地读取NTFS的存储设备，所以第一个建议是：如果您是仅使用Mac的人群，那么请尽量确保您自己的存储设备文件格式为exFAT或其他Mac原生支持的文件格式，以便于您访问和操作这些存储设备内的文件。&lt;/p&gt;
&lt;p&gt;显然，您的Mac总会有同NTFS设备接入的时候，那么这时该如何正常地访问NTFS设备呢？NTFS for Mac是目前使用最为广泛的应用，but，这是一个付费应用，而且，对于Mac这种并非不支持NTFS访问的设备而言，花钱去访问让人感觉非常不值。那么，Mounty是一个很不错的选择。&lt;/p&gt;
&lt;p&gt;Mounty的正常使用在此不再详述，仅记录一些使用问题的解决方法。&lt;/p&gt;
&lt;h5 id=&#34;出现不可重新挂载问题&#34;&gt;出现不可重新挂载问题&lt;/h5&gt;
&lt;p&gt;这种情况一般是由于未正确插拔设备导致，请在windows下使用时选择移除可移动设备后再拔除&lt;/p&gt;
&lt;p&gt;在windows下使用&lt;strong&gt;chkdsk X: /f&lt;/strong&gt; （X为移动设备对应的盘符）命令检查磁盘即可&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>李宏毅-Machine_Learning</title>
      <link>https://lowerce.github.io/post/ml_lhy/</link>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lowerce.github.io/post/ml_lhy/</guid>
      
        <description>&lt;p&gt;&lt;em&gt;这是Lowerce&amp;rsquo;s Blog的第四篇文章&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;此文是根据李宏毅2021年春季的机器学习课程撰写。李宏毅机器学习课程的特点是对理论理解的剖析非常深入同时又不失在实际训练过程中的trick教学。&lt;/p&gt;
&lt;h2 id=&#34;1-机器学习general-guidence&#34;&gt;1. 机器学习general guidence&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/1D9FC546-6F96-44DB-9F10-A5679B13C56D.png&#34; alt=&#34;机器学习general guidence&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-调参trick&#34;&gt;2. 调参trick&lt;/h2&gt;
&lt;h3 id=&#34;1-local-minima局部最小值and-saddle-point鞍点&#34;&gt;1. local minima（局部最小值）and saddle point（鞍点）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Hessian Matrix&lt;/strong&gt; - 其实就是二阶导 在一阶导数消失的时候通过二阶导来决定下一步行进的方向&lt;/p&gt;
&lt;p&gt;H正定时（Hessian Matrix 所有特征值为正）说明遇到 local minima&lt;/p&gt;
&lt;p&gt;H正负不定（Hessian Matrix 特征值有正有负）说明遇到 saddle point&lt;/p&gt;
&lt;p&gt;向沿H特征向量的方向更新参数&lt;/p&gt;
&lt;h3 id=&#34;2-batch-size-and-momentum&#34;&gt;2. batch size and momentum&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;batch size大小的优劣&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/C8DF9C21-AECE-49A2-84D8-5797175941FA.png&#34; alt=&#34;batch size&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由1、2得出的conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/79D06710-F038-40EA-88EA-B7171FF632B6.png&#34; alt=&#34;conclusin of 1 and 2&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-adaptive-learning-rate&#34;&gt;3. Adaptive Learning Rate&lt;/h3&gt;
&lt;p&gt;$\sigma$&lt;/p&gt;
&lt;p&gt;Root Mean Square &amp;ndash;&amp;gt; RMSProp &amp;ndash;&amp;gt; Adam(RMSProp + Momentum)&lt;/p&gt;
&lt;p&gt;$ \eta $&lt;/p&gt;
&lt;p&gt;Learning Rate Scheduling: Learing Rate Decay and Warm Up&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Optimizer总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/11A3D17A-7B8E-464F-9926-1C529FFE2B84.png&#34; alt=&#34;Optimization Summary&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-loss-function&#34;&gt;4. Loss function&lt;/h3&gt;
&lt;p&gt;Cross-entropy 如何优于 Mean Square Error (MSE)？&lt;/p&gt;
&lt;p&gt;从error surface的角度来看 Cross-entropy 的梯度变化更平缓 &amp;ndash;&amp;gt; 更好 train&lt;/p&gt;
&lt;h3 id=&#34;5-batch-normalization&#34;&gt;5. Batch Normalization&lt;/h3&gt;
&lt;p&gt;Feature Normalization - 对所有样本的每一个维度（dimension）作 normalization（减均值、除方差）&lt;/p&gt;
&lt;p&gt;可以对每一层的输出（激活函数前后影响不大）作上述 Featurn Normalization&lt;/p&gt;
&lt;p&gt;归根结底让整个 error surface 不那么崎岖（还有各种Normalization的方法）&lt;/p&gt;
&lt;h2 id=&#34;3-cnn&#34;&gt;3. CNN&lt;/h2&gt;
&lt;p&gt;在图像感知的问题中使用&lt;/p&gt;
&lt;p&gt;stride 迈步步长 padding 越界填充&lt;/p&gt;
&lt;p&gt;Receptive field &amp;ndash;&amp;gt; neutrons &amp;ndash;&amp;gt; shared parameters&lt;/p&gt;
&lt;p&gt;filters &amp;ndash;&amp;gt; Feature Map&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两种看待CNN所做事情的角度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/C86E2845-06BB-4CB7-96B1-FACE8BD92187.png&#34; alt=&#34;两个故事&#34;&gt;&lt;/p&gt;
&lt;p&gt;Pooling - subsampling  比较典型的 Max Pooling&lt;/p&gt;
&lt;p&gt;Pooling不是必要的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CNN的标准流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/61E6FEDC-9788-4786-A1B1-2D0987C77ACE.png&#34; alt=&#34;典型CNN流程&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-self-attention&#34;&gt;4. Self-attention&lt;/h2&gt;
&lt;p&gt;Sequence(vector set) input 考虑整个input sequence的资讯&lt;/p&gt;
&lt;p&gt;《Attention is all you need》&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Self-attention的运行方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/4F8CE0ED-6696-4449-82FD-511E7EEC0555.png&#34; alt=&#34;self attention运作机制&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multi-head Self-attention&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/BC60BC4E-EC6A-42B8-BB92-F6DF3E6EEAB1.png&#34; alt=&#34;multi-head self attention&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Position Encoding&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/E6BE25B8-F4EF-44FE-A0F0-BE7C8085AC46.png&#34; alt=&#34;position encoding&#34;&gt;&lt;/p&gt;
&lt;p&gt;Self-attention可以视作可调感知域的&lt;strong&gt;CNN&lt;/strong&gt;（在数据量足够大时效果要好于CNN） CNN属于简化版的Self-attention&lt;/p&gt;
&lt;p&gt;Self-attention比起&lt;strong&gt;RNN&lt;/strong&gt;更加不受输入vector之间距离的影响&lt;/p&gt;
&lt;h2 id=&#34;5-transformer-seq2seq&#34;&gt;5. Transformer (Seq2Seq)&lt;/h2&gt;
&lt;p&gt;语音辨识&lt;/p&gt;
&lt;p&gt;Encoder + Decoder&lt;/p&gt;
&lt;h3 id=&#34;encoder&#34;&gt;Encoder&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Encoder block的构成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/584624C6-718B-4650-A1C2-06429F36429E.png&#34; alt=&#34;one block of Encoder&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encoder的结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/C0FB8882-3F54-4CF0-92BF-E17CB7E8915E.png&#34; alt=&#34;Encoder&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;decoder&#34;&gt;Decoder&lt;/h3&gt;
&lt;p&gt;分为 Autoregressive 和 Non- Autoregressive&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/B06A8A1F-5B7B-4640-B779-8167621FA019.png&#34; alt=&#34;对比&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面以Autoregressive为例概述Decoder的组成结构&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Masked Self-attention&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;显然在Decoder中上一个的输出作为下一个的输入，输入一个一个依次产生，无法像Self-attention那样直接考虑所有的资讯&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/25E02433-E241-43DE-8EC1-7A114044ABAB.png&#34; alt=&#34;Masked Self-attention&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cross attention&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/A9EA99CD-4DA1-4FAB-B524-0987E7DF8ABC.png&#34; alt=&#34;Cross attention&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Decoder的结构（Encoder and Decoder）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lowerce.github.io/img/196FCDE9-E68C-427E-8EE9-7614601932F9.png&#34; alt=&#34;Decoder&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;其它的seq2seq架构&#34;&gt;其它的Seq2Seq架构&lt;/h3&gt;
&lt;p&gt;Copy mechanism: Pointer Network&lt;/p&gt;
&lt;p&gt;Guided Attention:  Monotonic Attention、 Location-aware attention&lt;/p&gt;
&lt;h3 id=&#34;评价方法&#34;&gt;评价方法&lt;/h3&gt;
&lt;p&gt;BLUE score&lt;/p&gt;
&lt;p&gt;但BLUE难以用于optimuze，对于不知道如何optimize的问题可以使用&lt;strong&gt;RL&lt;/strong&gt;解决&lt;/p&gt;
&lt;h3 id=&#34;exposure-bias&#34;&gt;exposure bias&lt;/h3&gt;
&lt;p&gt;Scheduled Sampling来防止在teacher forcing下可能出现的“一步错步步错”的问题&lt;/p&gt;
&lt;h2 id=&#34;6-gan&#34;&gt;6. GAN&lt;/h2&gt;
&lt;p&gt;输出一种分布 &lt;strong&gt;Generator-生成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Discriminator&lt;/strong&gt;（判别Generator生成的优劣）&lt;/p&gt;
&lt;p&gt;D将G的生成集和训练集分别label后进行训练以期分辨G的生成和自然数据的差异(real or fake，real打分更高)；G将生成接到D上让D打分 以此作为loss 来更新G的参数&lt;/p&gt;
&lt;p&gt;轮流固定G和D，训练D和G&lt;/p&gt;
&lt;h3 id=&#34;训练trick&#34;&gt;训练trick&lt;/h3&gt;
&lt;p&gt;D存在的意义是在无法或者不容易计算生成数据分布与自然数据分布的divergence的情况下给出loss使G能够train起来，divergence的选择（参见f-GAN文章）决定了D的objective function。&lt;/p&gt;
&lt;p&gt;JS divergence 不适合区分两个分布没有重叠(overlap)的情况，而在高维空间中不同分布图像的overlap很少；Wasserstein distance适于计算两个分布之间的距离（WGAN）&lt;/p&gt;
&lt;p&gt;未完待续&amp;hellip;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>使用leetcode练习算法的一些总结(UPDATE-1)</title>
      <link>https://lowerce.github.io/post/leetcode-record-2/</link>
      <pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lowerce.github.io/post/leetcode-record-2/</guid>
      
        <description>&lt;p&gt;&lt;em&gt;这是Lowerce&amp;rsquo;s Blog的第三篇文章&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;即使不靠算法吃饭，leetcode依然能让我在编程语言的使用上更上一层楼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文内容依据我在使用c++完成各类leetcode问题时得到的有效信息和经验写成。&lt;/p&gt;
&lt;p&gt;P.S.可能更强调在c++的使用上而非各类逆天的算法解决方案上。&lt;/p&gt;
&lt;h3 id=&#34;1-一些c标准库函数&#34;&gt;1. 一些C++标准库函数&lt;/h3&gt;
&lt;h4 id=&#34;reverse&#34;&gt;reverse&lt;/h4&gt;
&lt;p&gt;这个好像可以用来反转很多C++支持的数据结构，一般是两个输入参量，用法大概是这样。reverse(开始位置，开始位置+需要翻转的数量)，从这个角度看，它的输入参量是&lt;strong&gt;左闭右开&lt;/strong&gt;的区间，例如reverse(string.begin(),string.end())&amp;hellip;&lt;/p&gt;
&lt;p&gt;反正第一次用起来有点晕，极有可能c++很多的标准函数采用类似的输入形式，需要注意。&lt;/p&gt;
&lt;h4 id=&#34;resize&#34;&gt;resize&lt;/h4&gt;
&lt;p&gt;反正对于字符串而言挺好使，直接resize(更新后的尺寸)，可以直接把字符串扩充到指定长度，多出来的部分应该是空的吧。&lt;/p&gt;
&lt;h4 id=&#34;sort&#34;&gt;sort&lt;/h4&gt;
&lt;p&gt;sort(begin(),end())这样用，反正可以直接按从小到大光速排序，这里的开始和结束参照reverse，输入是完全一样的方法。说明前面的猜想是正确的😄。&lt;/p&gt;
&lt;p&gt;好像还可以用自定义函数作为第三个输入参量来作为排序依据，这个等以后做题遇到的时候再写吧，没用过的东西一概不写😋。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以后随时更新&amp;hellip;&lt;/strong&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>使用leetcode练习算法的一些总结</title>
      <link>https://lowerce.github.io/post/leetcode-record/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lowerce.github.io/post/leetcode-record/</guid>
      
        <description>&lt;p&gt;&lt;em&gt;这是Lowerce&amp;rsquo;s Blog的第二篇文章&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;即使不靠算法吃饭，leetcode依然能让我在编程语言的使用上更上一层楼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文内容依据我在使用c++完成各类leetcode问题时得到的有效信息和经验写成。&lt;/p&gt;
&lt;p&gt;P.S.可能更强调在c++的使用上而非各类逆天的算法解决方案上。&lt;/p&gt;
&lt;h3 id=&#34;1-map&#34;&gt;1. map&lt;/h3&gt;
&lt;p&gt;总的来说map是一个非常好用的东西，很多可以用set的问题我依然使用map来解决，感觉很舒服。&lt;/p&gt;
&lt;h4 id=&#34;创建&#34;&gt;创建&lt;/h4&gt;
&lt;p&gt;创建的时候需要指定好类型 map or unordered_map &amp;lt; type , type &amp;gt; variable_name，创建出来是空的。拿unordered_map&amp;lt;string,int&amp;gt; maps来举例。&lt;/p&gt;
&lt;h4 id=&#34;插入删除&#34;&gt;插入删除&lt;/h4&gt;
&lt;p&gt;对于计数型应用(反正做题比较多)，即后一个type是int的情况，用起来很简单，直接maps[&amp;ldquo;hello&amp;rdquo;]++，这样就在创建了对应key值并+1。这里使用上&lt;strong&gt;值得注意&lt;/strong&gt;，当key对应的value值减到0时，并不意味着这个key就消失了，需要maps.erase(&amp;ldquo;hello&amp;rdquo;)才能真正抹掉对应的key值。&lt;/p&gt;
&lt;p&gt;其它的应用就需要使用maps.insert(pair&amp;lt;string,string&amp;gt;(&amp;ldquo;hello&amp;rdquo;,&amp;ldquo;world&amp;rdquo;))来插入了。&lt;/p&gt;
&lt;h4 id=&#34;查找&#34;&gt;查找&lt;/h4&gt;
&lt;p&gt;作为一个哈希表，查找是其得到使用的根本原因。&lt;/p&gt;
&lt;p&gt;看一个key是不是在表里， if(maps.find(&amp;ldquo;hello&amp;rdquo;)!=maps.end()) ，如果返回true，则说明在表里。这里的返回值是一个迭代器，迭代器这么用，maps.find(&amp;ldquo;hello&amp;rdquo;)-&amp;gt;first ，这就是key的值（也就是&amp;quot;hello&amp;quot;），maps.find(&amp;ldquo;hello&amp;rdquo;)-&amp;gt;second ，这就是&amp;quot;hello&amp;quot;对应的value值。&lt;/p&gt;
&lt;p&gt;想遍历map，也得靠迭代器，先造个迭代器，unordered_map&amp;lt;string,int&amp;gt;::iterator itr，然后for循环的用法就跟一般的遍历差不多了。for(itr=maps.begin();itr!=maps.end();itr++)这样就能遍历啦。&lt;/p&gt;
&lt;h3 id=&#34;2-string&#34;&gt;2. string&lt;/h3&gt;
&lt;p&gt;string的各种操作用法千奇百怪，很多感觉几乎等效。&lt;/p&gt;
&lt;h4 id=&#34;assign&#34;&gt;assign&lt;/h4&gt;
&lt;p&gt;大概用法是 s1.assign(s,index,num) ，这样可以把s字符串从index索引值开始往后的num个字符赋给s1字符串。&lt;/p&gt;
&lt;p&gt;基本跟substr是一样的。&lt;/p&gt;
&lt;h4 id=&#34;substr&#34;&gt;substr&lt;/h4&gt;
&lt;p&gt;s1=s.substr(index,num) ，这个操作跟使用assign是等效的。&lt;/p&gt;
&lt;h3 id=&#34;3-for&#34;&gt;3. for&lt;/h3&gt;
&lt;p&gt;for循环一些自动遍历的trick之前没用过。&lt;/p&gt;
&lt;p&gt;比如for(auto i:nums)或者for(auto &amp;amp;i:maps)，后者取值用t.first和t.second即可。也可以for(auto &amp;amp;[key,vaule]:maps)就能直接取到key和value啦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以后随时更新&amp;hellip;&lt;/strong&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>写在2020年的最后一天</title>
      <link>https://lowerce.github.io/post/my-first-record/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lowerce.github.io/post/my-first-record/</guid>
      
        <description>&lt;p&gt;&lt;em&gt;这是Lowerce&amp;rsquo;s Blog的第一篇文章&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就在2020年的最后一天写点什么来度过这个不太一样的2020吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果在2020年的第一天让我猜测一下我的2020年会是什么样子的，我至少不会猜到今天的我会是以什么样的心情来写下这篇文字。如果说这一年对于大多数人而言是totally shit的话，对于我而言，这是很不错的一年吧，即使有疫情，即使生活也并没有那么如偿所愿，因为我遇到了一个姑娘，my life and my world are totally changed.&lt;/p&gt;
&lt;p&gt;疫情最严重的那段时光并没有一个好心情相衬，如果我没有在家而是一直在学校的话，相信疫情生活会有意思许多。我会用大量的时间来让我的脑袋更满一些、更满一些、再满一些。在家的疫情生活就是在开会、打游戏、买材料和各种各样的坏心情中度过，实际的工作时间（指用来code和补充知识来改进code的时间）少的可怜，几乎所有的工作就是在原来的上位机程序里修修补补，做一些适配性质的改进，唯一比较原创的工作就是部署了一个挺酷炫的UI，使用了新的页面切换模式。总而言之，在家的疫情生活的确让我对C#的理解更为深入了，不出意外我可以自己写出更为“商业”的应用程序来了，当然同样深入的还有对和平精英的理解，可能后者更甚，尤其是在家里超烂网络的加持下。那段日子里的开心时光都是在和小伙伴打游戏和去附近玩耍的时光里度过的，还有就是和多年来的好兄弟们的聚会里。这些多年前的好友总是会在我很需要的时候（当然我不会讲）陪在我身边，大家还是跟相识时的状态一样，同样的无话不说，同样的热爱生活，同样的憧憬未来，同样真诚快乐地生活在这个大家还都有所期盼的世界里。&lt;/p&gt;
&lt;p&gt;小姑娘的心情因为疫情的缘故并没有很好，跟小姑娘聊天的时候隔着屏幕都能感受到她强烈的感情波动，如果疫情需要什么正确的集体记忆的话，我也就没什么好多说的了，我想起微博上看到的一句话，“&lt;em&gt;现在搞的如火如荼如临大敌，是从心理上对去年同期隐瞒拖延的补偿。亡羊补牢好，举轻若重不好。&lt;/em&gt;” 疫情最严重的那段时间，对于关心疫情和正在经历着疫情的人们而言，如果恰好没有一颗强大的内心的话（事实上并没有人能在真正关心并接受着各种信息的情况下视若无睹，只有选择并不真正去关心和选择不再接受信息两种方式让自己的心情好受一些），终归是一段难熬的日子吧。&lt;/p&gt;
&lt;p&gt;回到学校的日子果然要happy得多，刚回去的日子里，no study，all game. 直到发现毕业设计中的一个part出现了严重的进度问题，大家都开始忙碌起来，从开始充满斗志的忙到最后濒临死亡的忙（更多的是心情的变化吧，从充满希望到满怀绝望，果然责任心不是什么好东西），虽然一直在说这是个烂摊子，但是忙碌仍然让我学到了很多新的东西，原理图、PCB、32的编程都有了一些从理论到实践的跨越，虽然仍旧粗浅，但至少做过和没做还是差异巨大，更为重要的是，我享受了一把死亡边缘的感觉，我喜欢把自己逼到死的感觉，工作不息，潜能不止。顺利毕业还get到了一个在全校面前show的机会，总之，心情不算好，收获不算少，有一种不枉四年的感觉吧，在大学即将结束的时候做一些这样的事情，从时间上来说不算差，至于心情，我心情什么时候特别棒过呢，也就这样吧。&lt;/p&gt;
&lt;p&gt;毕业后的假期过的仍旧是喜忧参半吧，可能我跟我自己不太对付，我需要独处的时间越来越多，但是自己待着心情又越来越差，幸运的是我还有工作可做，刚刚从南航离开就去了合肥，一住就是一周，好喜欢这种一个人住在陌生城市里的感觉，每走远一步，就有新的惊喜，这种无拘无束的日子我特别特别喜欢，工作也没少完成，几天内看了篇巨长的文献，学了不少G4的原理，这些从没接触过的东西塞到脑子里的感觉，还不错，挺有意思的。回到家里，也在被师兄们的牛逼push着，所以东西也没少学，论文也没少看，啥感兴趣学啥的感觉真好呀。&lt;/p&gt;
&lt;p&gt;小姑娘在几个晚上给我打了几通电话，都在讲在那次“激烈”的交流吧，小姑娘没有做错什么，我的不对更多一些吧，像是一个小朋友在看面前的人是不是在乎自己一样，把脸扭向一边，看看她有没有发现我的不开心，很幼稚，但是小朋友获得了自己想要得到的🍬。开学之前的不开心都在跟小姑娘分享着，我好喜欢小姑娘呀。&lt;/p&gt;
&lt;p&gt;开学后的时光平平无奇，开课前的研究生教育，开课后的上课，一切都跟本科并无不同，区别就在于热水的供应时间和需要骑车才能到达的教室。我的博士生涯就在这样的波澜不惊中开始了，直到十月初，小姑娘来到北京找我。那些时光就像在昨天一样，我彻底爱上了小姑娘。&lt;/p&gt;
&lt;p&gt;2020年剩下的时光就是我和姑娘的爱情故事啦，2021、2022、2023……，嘿嘿，未来的每一年都会是的！这是属于我们两个的爱情故事💓。&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
